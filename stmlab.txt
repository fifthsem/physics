---3---
package com.vogella.JUnit.Basic;
public class Addition {
public int addNumbers(int a , int b)
{
		int sum=a+b;
		return sum;
}
}
package com.vogella.JUnit.Basic;
import static org.junit.Assert.*;
import java.util.Arrays;
import java.util.Collection; 
import org.junit.Test;
import org.junit.runner.RunWith;
import org.junit.runners.Parameterized;
import org.junit.runners.Parameterized.Parameters;
@RunWith(Parameterized.class)
public class AdditionTest
{
private int expected;
private int first;
private int second; 
public AdditionTest(int expectedResult, int firstNumber,
int secondNumber) {
this.expected = expectedResult;
this.first = firstNumber;
this.second = secondNumber;
    } 
@Parameters
public static Collection<Integer[]> addedNumbers() {
return Arrays.asList(new Integer[][] { { 10, 6, 4 }, { 6, 3, 3 },
                { 20, 15, 5 }, { 13, 9, 4 },{2,1,1} });
}	@Test
	public void test() 
		  {
			Addition add = new Addition();
			System.out.println("Addition with parameters : " + first + " and "		                + second);
assertEquals(expected,add.addNumbers(first, second));
	}
}









---4----
package com.vogella.JUnit.Prime;

public class Prime 
{
public int isPrime(int n)
{
	int c=0;
	for(int i=1;i<n;i=i+1)
	{
		if(n%i==0)
			c=c+1;
		if(c>1)
			return 0;
	}
	if(c==1)
		return 1;
	return 0;
}
}
package com.vogella.JUnit.Prime;
import static org.junit.Assert.*;
import java.lang.reflect.Array;
import java.util.Arrays;
import java.util.Collection;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.junit.runners.Parameterized;
import org.junit.runners.Parameterized.Parameters;

@RunWith(Parameterized.class)
public class Prime1 {
	private int expected;
	private int first;
	public Prime1(int expectedResult,int first)
	{
		this.first=first;
		this.expected=expectedResult;
	}
	@Parameters
public static Collection<Integer[]>PrimeNumber(){
		return Arrays.asList(new Integer[][]{{1,7},{1,4},{1,3}});
	}
	@Test
	public void testIsPrime() {
		Prime pr=new Prime();
		System.out.println("Prime with parameters:"+first);
		assertEquals(expected,pr.isPrime(first));
	}
}



----5---packagecom.vogella.JUnit.Basic;
 
public class Triangle {
 
publicint fun(int a, int b, int c)
{
if(a==b && b==c)
return 1;
else if(a==b || b==c || a==c)
return 2;
else
return 3;
}
}
package com.vogella.JUnit.Basic;

import static org.junit.Assert.*;
importjava.util.Arrays;
importjava.util.Collection;
importorg.junit.Test;
importorg.junit.runner.RunWith;
importorg.junit.runners.Parameterized;
importorg.junit.runners.Parameterized.Parameters;

@RunWith(Parameterized.class)
public class TriangleTest {
privateint expected;
privateint first;
privateint second;
privateint third;
publicTriangleTest(intfirstNumber, intsecondNumber, intthirdNumber, intexpectedResult)
{
this.expected = expectedResult;
this.first = firstNumber;
this.second = secondNumber;
this.third = thirdNumber;
}
@Parameters
public static Collection<Integer[]>addNumbers()
{
returnArrays.asList(new Integer[][]{
{4,4,4,1},{1,2,2,1},{7,2,6,3},{1,1,2,2},{7,8,1,3}}
@Test
public void testSubNumbers() {
//fail("Not yet implemented");
Triangle s= new Triangle();
System.out.println("Prime check with parameter : "+first);
assertEquals(s.fun(first,second,third),expected);
}

}






----6---
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
namespace Leela64
{
    public class Addition
    {
        public int add(int x, int y)
        {
            return (x + y);
        }
    }
    public class Subtraction
    {
        public int sub(int x, int y)
        {
            return (x - y);
        }
    }
    public class Division
    {
        public int div(int x, int y)
        {
            return (x / y);
        }
    }

    public class Multiplication
    {
        public int mul(int x, int y)
        {
            return (x * y);
        } }
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using NUnit.Framework;
using Leela64;
namespace Test
{
    [TestFixture]
    public class Class1
    {
        [Test]
        public void prs()
        {
            Multiplication m1 = new Multiplication();
            Addition a1 = new Addition();
            Subtraction s1 = new Subtraction();
            Division d1 = new Division();
            Assert.AreEqual(20, m1.mul(5, 4));
            Assert.AreEqual(1, s1.sub(8, 7));
            Assert.AreEqual(7, a1.add(3, 4));
            Assert.AreEqual(1, d1.div(5, 5));
        }
        [Test]
        public void prs1()
        {
            Multiplication m1 = new Multiplication();
            Addition a1 = new Addition();
            Subtraction s1 = new Subtraction();
            Division d1 = new Division();
            Assert.AreEqual(10, m1.mul(2, 4));
            Assert.AreEqual(1, s1.sub(8, 7));
            Assert.AreEqual(7, a1.add(3, 4));
            Assert.AreEqual(1, d1.div(5, 5));
        }}}




-----7-----using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
namespace Prime64
{
    public class Prime
    {
        public int isPrime(int n)
  {
		int c=0;
		for(int i=1;i<n;i=i+1)
		{
			if(n%i==0)
			c=c+1;
			if(c>1)
			return 0;
		}
		if(c==1)
		return 1;
		return 0;
} }}
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using NUnit.Framework;
using Prime64;
namespace Test
{
    [TestFixture]
    public class Class1
    {
        [Test]
        public void prs()
        {
Prime	 p=new Prime();
            Assert.AreEqual(1, p.isPrime(5));
        }  }
}




----8----using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
namespace Triangle64
{
    public class Triangle
    {
        public int ischeck(int x, int y,int z)
        {
if(x==y && y==z && z==x)
return 1;
if(x==y || y==z || z==x)
return 2;
else
      return 3;
        }
    }
}

using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using NUnit.Framework;
using Triangle64;
namespace Test
{
    [TestFixture]
    public class Class1
    {
        [Test]
        public void prs()
        {
            Triangle d1=new Triangle();
            Assert.AreEqual(1, d1.ischeck(5,5,5));
        }

    }
}
